# Calculate date range for axis breaks
min_date <- floor_date(min(gantt_data$Start), unit = "year")
max_date <- ceiling_date(max(gantt_data$End), unit = "year")
# Generate breaks on June and December
x_breaks <- seq.Date(from = as.Date(paste0(year(min_date), "-06-01")),
to = as.Date(paste0(year(max_date), "-12-01")),
by = "6 months")
# Plot Gantt chart
ggplot(gantt_data, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "PhD Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5)
)
# Plot Gantt chart
ggplot(gantt_data, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = F,
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5)
)
# Plot Gantt chart
ggplot(gantt_data, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = NA
x = "Date",
# Plot Gantt chart
ggplot(gantt_data, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5)
)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(DT)
ui <- fluidPage(
titlePanel("Gantt Chart Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("tasks", "Enter Activities (one per line):", placeholder = "e.g.\nPhase 1 Research\nData Collection\nAnalysis"),
textAreaInput("starts", "Enter Start Dates (YYYY-MM-DD, one per line):", placeholder = "e.g.\n2025-01-01\n2025-03-01\n2025-06-01"),
textAreaInput("ends", "Enter End Dates (YYYY-MM-DD, one per line):", placeholder = "e.g.\n2025-02-01\n2025-05-01\n2025-09-01"),
selectInput("bin_size", "X-axis Time Bin:", choices = c("3 months", "6 months", "12 months"), selected = "6 months"),
actionButton("generate", "Generate Gantt Chart", class = "btn-primary"),
br(), br(),
downloadButton("downloadPlot", "Download Chart (PNG)")
),
mainPanel(
plotOutput("ganttPlot", height = "600px"),
h4("Preview & Edit Parsed Data"),
DTOutput("editableTable"),
textOutput("status")
)
)
)
server <- function(input, output, session) {
# Store reactive data frame
user_data <- reactiveVal()
observeEvent(input$generate, {
tasks <- trimws(strsplit(input$tasks, "\n")[[1]])
starts <- trimws(strsplit(input$starts, "\n")[[1]])
ends   <- trimws(strsplit(input$ends, "\n")[[1]])
if (length(tasks) != length(starts) || length(tasks) != length(ends)) {
showNotification("Each activity must have a matching start and end date.", type = "error")
return(NULL)
}
starts <- suppressWarnings(ymd(starts))
ends   <- suppressWarnings(ymd(ends))
if (any(is.na(starts)) || any(is.na(ends))) {
showNotification("Check that all dates are in YYYY-MM-DD format.", type = "error")
return(NULL)
}
df <- data.frame(Activity = tasks, Start = starts, End = ends, stringsAsFactors = FALSE)
df <- df %>%
mutate(
Start = if_else(Start > End, End, Start),
End = if_else(Start > End, Start, End),
Year = year(Start)
) %>%
arrange(Start) %>%
mutate(Activity = factor(Activity, levels = rev(unique(Activity))))
user_data(df)
})
output$editableTable <- renderDT({
req(user_data())
datatable(user_data(), editable = "cell", rownames = FALSE)
})
observeEvent(input$editableTable_cell_edit, {
info <- input$editableTable_cell_edit
df <- user_data()
col <- names(df)[info$col + 1]
value <- info$value
# Convert Start/End edits to date
if (col %in% c("Start", "End")) {
value <- suppressWarnings(ymd(value))
if (is.na(value)) return()
}
df[info$row, col] <- value
df <- df %>%
mutate(
Start = ymd(Start),
End = ymd(End),
Start = if_else(Start > End, End, Start),
End = if_else(Start > End, Start, End),
Year = year(Start),
Activity = factor(Activity, levels = rev(unique(Activity)))
) %>%
arrange(Start)
user_data(df)
})
output$ganttPlot <- renderPlot({
req(user_data())
df <- user_data()
bin_months <- case_when(
input$bin_size == "3 months" ~ 3,
input$bin_size == "6 months" ~ 6,
TRUE ~ 12
)
min_date <- floor_date(min(df$Start), unit = "month")
max_date <- ceiling_date(max(df$End), unit = "month")
x_breaks <- seq.Date(from = min_date, to = max_date, by = paste(bin_months, "months"))
ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5)
)
})
output$status <- renderText({
req(user_data())
paste("Chart generated with", nrow(user_data()), "activities.")
})
output$downloadPlot <- downloadHandler(
filename = function() {
paste0("gantt_chart_", Sys.Date(), ".png")
},
content = function(file) {
ggsave(file, plot = {
df <- user_data()
bin_months <- case_when(
input$bin_size == "3 months" ~ 3,
input$bin_size == "6 months" ~ 6,
TRUE ~ 12
)
min_date <- floor_date(min(df$Start), unit = "month")
max_date <- ceiling_date(max(df$End), unit = "month")
x_breaks <- seq.Date(from = min_date, to = max_date, by = paste(bin_months, "months"))
ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
plot.title = element_text(hjust = 0.5)
)
}, width = 12, height = 8, dpi = 300)
}
)
}
shinyApp(ui, server)
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(DT)
ui <- fluidPage(
titlePanel("Custom Gantt Chart Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("tasks", "Activities (one per line):", placeholder = "e.g. Chapter 1 Review"),
textAreaInput("starts", "Start Dates (YYYY-MM-DD, one per line):", placeholder = "e.g. 2024-10-01"),
textAreaInput("ends", "End Dates (YYYY-MM-DD, one per line):", placeholder = "e.g. 2025-03-01"),
checkboxInput("preserve_order", "Preserve row order", value = TRUE),
actionButton("generate", "Generate Gantt Chart", class = "btn-primary"),
br(), br(),
downloadButton("downloadPlot", "Download Chart")
),
mainPanel(
h4("Editable Data Preview"),
DTOutput("editableTable"),
br(),
plotOutput("ganttPlot", height = "600px")
)
)
)
server <- function(input, output, session) {
dataInput <- reactiveVal()
# Generate initial data
observeEvent(input$generate, {
tasks  <- strsplit(input$tasks, "\n")[[1]]
starts <- ymd(strsplit(input$starts, "\n")[[1]])
ends   <- ymd(strsplit(input$ends, "\n")[[1]])
if (length(tasks) != length(starts) || length(tasks) != length(ends)) {
showNotification("Each activity must have a start and end date.", type = "error")
return()
}
df <- data.frame(Activity = tasks, Start = starts, End = ends, stringsAsFactors = FALSE)
df <- df %>%
mutate(
Start = if_else(Start > End, End, Start),
End = if_else(Start > End, Start, End),
Year = year(Start)
)
if (input$preserve_order) {
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
} else {
df <- df %>% arrange(Start)
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
}
dataInput(df)
})
# Editable table
output$editableTable <- renderDT({
req(dataInput())
datatable(dataInput(), editable = TRUE, rownames = FALSE)
})
# Update table if edited
observeEvent(input$editableTable_cell_edit, {
info <- input$editableTable_cell_edit
df <- dataInput()
df[info$row, info$col] <- info$value
df$Start <- ymd(df$Start)
df$End <- ymd(df$End)
df$Year <- year(df$Start)
if (input$preserve_order) {
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
} else {
df <- df %>% arrange(Start)
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
}
dataInput(df)
})
# Gantt chart
output$ganttPlot <- renderPlot({
req(dataInput())
df <- dataInput()
min_date <- floor_date(min(df$Start), unit = "year")
max_date <- ceiling_date(max(df$End), unit = "year")
x_breaks <- seq.Date(from = as.Date(paste0(year(min_date), "-06-01")),
to = as.Date(paste0(year(max_date), "-12-01")),
by = "6 months")
ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
})
# Download handler
output$downloadPlot <- downloadHandler(
filename = function() {
paste0("gantt_chart_", Sys.Date(), ".png")
},
content = function(file) {
df <- dataInput()
min_date <- floor_date(min(df$Start), unit = "year")
max_date <- ceiling_date(max(df$End), unit = "year")
x_breaks <- seq.Date(from = as.Date(paste0(year(min_date), "-06-01")),
to = as.Date(paste0(year(max_date), "-12-01")),
by = "6 months")
g <- ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
ggsave(file, plot = g, width = 12, height = 8, dpi = 300)
}
)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(dplyr)
library(lubridate)
library(DT)
ui <- fluidPage(
titlePanel("Custom Gantt Chart Generator"),
sidebarLayout(
sidebarPanel(
textAreaInput("tasks", "Activities (one per line):", placeholder = "e.g. Chapter 1 Review"),
textAreaInput("starts", "Start Dates (YYYY-MM-DD, one per line):", placeholder = "e.g. 2024-10-01"),
textAreaInput("ends", "End Dates (YYYY-MM-DD, one per line):", placeholder = "e.g. 2025-03-01"),
checkboxInput("preserve_order", "Preserve row order", value = TRUE),
actionButton("generate", "Generate Gantt Chart", class = "btn-primary"),
br(), br(),
downloadButton("downloadPlot", "Download Chart")
),
mainPanel(
h4("Editable Data Preview"),
DTOutput("editableTable"),
br(),
plotOutput("ganttPlot", height = "600px")
)
)
)
server <- function(input, output, session) {
dataInput <- reactiveVal()
# Generate initial data
observeEvent(input$generate, {
tasks  <- strsplit(input$tasks, "\n")[[1]]
starts <- ymd(strsplit(input$starts, "\n")[[1]])
ends   <- ymd(strsplit(input$ends, "\n")[[1]])
if (length(tasks) != length(starts) || length(tasks) != length(ends)) {
showNotification("Each activity must have a start and end date.", type = "error")
return()
}
df <- data.frame(Activity = tasks, Start = starts, End = ends, stringsAsFactors = FALSE)
df <- df %>%
mutate(
Start = if_else(Start > End, End, Start),
End = if_else(Start > End, Start, End),
Year = year(Start)
)
if (input$preserve_order) {
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
} else {
df <- df %>% arrange(Start)
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
}
dataInput(df)
})
# Editable table
output$editableTable <- renderDT({
req(dataInput())
datatable(dataInput(), editable = TRUE, rownames = FALSE)
})
# Update table if edited
observeEvent(input$editableTable_cell_edit, {
info <- input$editableTable_cell_edit
df <- dataInput()
df[info$row, info$col] <- info$value
df$Start <- ymd(df$Start)
df$End <- ymd(df$End)
df$Year <- year(df$Start)
if (input$preserve_order) {
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
} else {
df <- df %>% arrange(Start)
df$Activity <- factor(df$Activity, levels = rev(df$Activity))
}
dataInput(df)
})
# Gantt chart
output$ganttPlot <- renderPlot({
req(dataInput())
df <- dataInput()
min_date <- floor_date(min(df$Start), unit = "year")
max_date <- ceiling_date(max(df$End), unit = "year")
x_breaks <- seq.Date(from = as.Date(paste0(year(min_date), "-06-01")),
to = as.Date(paste0(year(max_date), "-12-01")),
by = "6 months")
ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
})
# Download handler
output$downloadPlot <- downloadHandler(
filename = function() {
paste0("gantt_chart_", Sys.Date(), ".png")
},
content = function(file) {
df <- dataInput()
min_date <- floor_date(min(df$Start), unit = "year")
max_date <- ceiling_date(max(df$End), unit = "year")
x_breaks <- seq.Date(from = as.Date(paste0(year(min_date), "-06-01")),
to = as.Date(paste0(year(max_date), "-12-01")),
by = "6 months")
g <- ggplot(df, aes(x = Start, xend = End, y = Activity, yend = Activity, color = as.factor(Year))) +
geom_segment(size = 6) +
geom_vline(xintercept = Sys.Date(), linetype = "dashed", color = "red") +
scale_x_date(
breaks = x_breaks,
date_labels = "%b\n%Y",
expand = expansion(mult = c(0.01, 0.05))
) +
labs(
title = "Custom Gantt Chart",
x = "Date",
y = "Activity",
color = "Start Year"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
plot.title = element_text(hjust = 0.5)
)
ggsave(file, plot = g, width = 12, height = 8, dpi = 300)
}
)
}
shinyApp(ui, server)
